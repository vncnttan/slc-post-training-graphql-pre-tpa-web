package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/vncnttan/TrainingGraphQL/graph/model"
	"github.com/vncnttan/TrainingGraphQL/service"
)

// CreateTweet is the resolver for the createTweet field.
func (r *mutationResolver) CreateTweet(ctx context.Context, inputTweet model.NewTweet) (*model.Tweet, error) {
	userId := ctx.Value("UserID")

	fmt.Println(userId)

	tweet := &model.Tweet{
		ID:        uuid.NewString(),
		Title:     inputTweet.Title,
		Body:      inputTweet.Body,
		CreatedAt: time.Now(),
		UserID:    userId.(string),
	}
	return tweet, r.DB.Save(tweet).Error
}

// GetAllTweet is the resolver for the getAllTweet field.
func (r *queryResolver) GetAllTweet(ctx context.Context) ([]*model.Tweet, error) {
	var tweet []*model.Tweet

	userId := ctx.Value("UserID")
	fmt.Println(userId)

	return tweet, r.DB.Find(&tweet).Error
}

// User is the resolver for the user field.
func (r *tweetResolver) User(ctx context.Context, obj *model.Tweet) (*model.User, error) {
	return service.GetUser(ctx, obj.UserID)
}

// Tweet returns TweetResolver implementation.
func (r *Resolver) Tweet() TweetResolver { return &tweetResolver{r} }

type tweetResolver struct{ *Resolver }
